import argparse
import asyncio
import logging
import os
from etl.etl import load_cs2_data
from dotenv import load_dotenv
import httpx

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s"
)
log = logging.getLogger("cs2_main")


def parse_config() -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç CLI –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç .env.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
    """
    parser = argparse.ArgumentParser(description="CS2 periodic data loader")
    parser.add_argument(
        "--env_file",
        type=str,
        default=".env",
        help="Path to .env file (default: .env)",
    )
    args = parser.parse_args()
    load_dotenv(args.env_file)

    config = {
        "games_dir": os.getenv("PATH_TO_GAMES_RAW_DIR", "data/games_raw"),
        "base_url": os.getenv("CS2_API_BASE_URL", "http://localhost:8000"),
        "load_interval": int(os.getenv("LOAD_INTERVAL_SECONDS", 60 * 60)),
        "env_file": args.env_file,
    }
    return config


async def load_cs2_games_periodically(config: dict, client: httpx.Client):
    """
    config: —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    client: httpx.Client (–º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
    """
    while True:
        try:
            log.info("‚öôÔ∏è –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CS2 –¥–∞–Ω–Ω—ã—Ö...")
            result = load_cs2_data(config["games_dir"], config["base_url"], client)
            log.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CS2 –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)

        log.info(f"‚è± –ñ–¥–µ–º {config['load_interval']} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏...")
        await asyncio.sleep(config["load_interval"])


async def main():
    config = parse_config()
    log.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {config['env_file']}")
    log.info(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏: {config['load_interval']} —Å–µ–∫—É–Ω–¥")
    
    async with httpx.AsyncClient() as client:
        log.info("üöÄ CS2 Loader —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
        await load_cs2_games_periodically(config, client)


if __name__ == "__main__":
    asyncio.run(main())
